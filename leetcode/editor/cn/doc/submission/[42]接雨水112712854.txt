class Solution:
    def trap(self, height: List[int]) -> int:
#         # 双指针法:
#         if not height or len(height) <3:
#             return 0
#         m = len(height)
#         i, j = 1, m -1
        
#         rain_water = 0
#         left_max, right_max = 0, 0
#         while i <= j:
            
#             left_max = max(height[i], left_max)
#             print("left_max =" , left_max )
#             right_max = max(height[j], right_max)
#             print("right_max = ", right_max )
#             if height[i] < height[j]:
#                 rain_water += left_max - height[i]
#                 i+=1
#             else:
                
#                 rain_water += right_max - height[j]
#                 print('rain_water = ', rain_water )
#                 j-=1
#             print("rain_water = ", rain_water )
#         return rain_water
        # 方法二：双指针法:
        if not height or len(height) < 3:
            return 0
        i, j = 0, len(height) -1
        left_max, right_max, result = 0, 0, 0
        while i < j:
            left_max = max(height[i], left_max)
            right_max = max(height[j], right_max)
            # how much can current position trap depends on the shorter bar (                               木桶原理)
            if left_max < right_max:
                result += left_max - height[i]
                i+=1
            else:
                result += right_max - height[j]
                j-=1

        return result

                
                
            
# runtime:44 ms
# memory:13.6 MB
